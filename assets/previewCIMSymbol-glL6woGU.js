import{gN as V,gz as g,gO as m,gI as $,gA as S}from"./index-Byn_dG8u.js";import{a as b}from"./CIMSymbolHelper-dTciPGrk.js";import{CIMSymbolRasterizer as q}from"./CIMSymbolRasterizer-B2TBFJUQ.js";import{y as A}from"./OverrideHelper-DNYM05EZ.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-VmKjxowA.js";import"./GeometryUtils-frJpBBou.js";import"./rasterizingUtils-cdOSpX8x.js";import"./floatRGBA-DvSQP-0o.js";import"./Rect-CUzevAry.js";import"./BoundingBox-CCL9Ztbq.js";import"./CIMResourceManager-CHTOM2mC.js";const f=new q(null),u=m(S.size),I=m(S.maxSize),M=m(S.lineWidth),D=1;async function E(o,e,s){const i=e==null?void 0:e.size;let t=i!=null&&typeof i=="object"&&"width"in i?i.width:i,n=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(t==null||n==null)if(s==="esriGeometryPolygon")t=n=e.maxSize?Math.min(e.maxSize,u):u;else{const a=await N(o,e,s);a&&(t=a.width,n=a.height),s==="esriGeometryPolyline"&&(t=e.maxSize?Math.min(e.maxSize,M):M),t=t!=null&&isFinite(t)?Math.min(t,I):u,n=n!=null&&isFinite(n)?Math.max(Math.min(n,I),D):u}return e.style==="legend"&&s==="esriGeometryPolyline"&&(t=M),{width:t,height:n}}async function N(o,e,s){const{feature:i,fieldMap:t,viewParams:n}=e.cimOptions||e,a=await A.resolveSymbolOverrides(o.data,i,null,t,s,null,n);if(!a)return null;(o=o.clone()).data={type:"CIMSymbolReference",symbol:a},o.data.primitiveOverrides=void 0;const l=[];return b.fetchResources(a,f.resourceManager,l),b.fetchFonts(a,f.resourceManager,l),l.length>0&&await Promise.all(l),b.getEnvelope(a,null,f.resourceManager)}async function _(o,e={}){var x,P;const{node:s,opacity:i,symbolConfig:t}=e,n=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,a=e.cimOptions||e,l=a.geometryType||V((x=o==null?void 0:o.data)==null?void 0:x.symbol),r=await E(o,e,l),{feature:G,fieldMap:L}=a,O=e!=null&&e.geometry||n||l!=="esriGeometryPolygon"?"preview":"legend";let v=r;const z=r;if(e!=null&&e.geometry&&(l==="esriGeometryPolygon"||l==="esriGeometryPolyline")&&(g(r.width)<200||g(r.height)<200)){const R=r.width>r.height?m(200)*r.height/r.width:m(200);v={width:r.width>r.height?m(200):m(200)*r.width/r.height,height:R}}const p=await f.rasterizeCIMSymbolAsync(o,G,v,O,L,l,null,a.viewParams,a.allowScalingUp,(P=e==null?void 0:e.geometry)==null?void 0:P.toJSON());if(!p)return null;const{width:F,height:j}=p,c=document.createElement("canvas");c.width=F,c.height=j,c.getContext("2d").putImageData(p,0,0);const d=g(z.width),w=g(z.height),h=new Image(d,w);h.src=c.toDataURL(),h.ariaLabel=e.ariaLabel??null,h.alt=e.ariaLabel??"",i!=null&&(h.style.opacity=`${i}`);let y=h;if(e.effectView!=null){const C={shape:{type:"image",x:0,y:0,width:d,height:w,src:h.src},fill:null,stroke:null,offset:[0,0]};y=$([[C]],[d,w],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return s&&y&&s.appendChild(y),y}export{_ as previewCIMSymbol};
