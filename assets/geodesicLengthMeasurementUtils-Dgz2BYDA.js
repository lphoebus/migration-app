import{bi as o,bg as l,aU as u,k6 as a}from"./index-Cv1x7wWx.js";import{geodesicLength as c}from"./geometryEngine-Bi2Us_lG.js";import{y as f,q as m,b as y,R}from"./geodesicUtils-C4bKUIk5.js";function k(e){return f(e)||o(e)}function p(e,n,r,...i){return f(e)?n.apply(void 0,i):o(e)?r.apply(void 0,i):null}function q(e){const{spatialReference:n}=e;return p(n,b,x,e)}function w(e,n){if(!l(e.spatialReference,n.spatialReference))return null;const{spatialReference:r}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,s[0]=n.x,s[1]=n.y,s[2]=n.hasZ?n.z:0,d(t,s,r)}function d(e,n,r){return p(r,g,h,e,n,r)}function g(e,n,r){return a(m(v,e,n,r).distance,"meters")}function h(e,n,r){return a(c($(e,n,r),"meters"),"meters")}function b(e){return a(R([e],"meters")[0],"meters")}function x(e){return a(c(e,"meters"),"meters")}function $(e,n,r){return{type:"polyline",spatialReference:r,paths:[[[...e],[...n]]]}}const v=new y,t=u(),s=u();export{k as e,w as f,q as m,p as r,d as u};
