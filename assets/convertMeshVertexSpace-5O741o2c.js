import{aL as p,ax as m,aS as s}from"./index-Cv1x7wWx.js";import{p as a}from"./MeshVertexAttributes-DLeJ7f4R.js";import{B as n}from"./vertexSpaceConversion-_dA7FlSu.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CYkFNjFc.js";import"./computeTranslationToOriginAndRotation-ojcHMhl-.js";import"./projectPointToVector-CmVBAsgl.js";import"./meshVertexSpaceUtils-ChHpEjbb.js";import"./MeshLocalVertexSpace-2Nq58yOY.js";import"./vec3-CmV8slfk.js";import"./BufferView-Cj0PjY6D.js";import"./vec4-DB-BxfdS.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
