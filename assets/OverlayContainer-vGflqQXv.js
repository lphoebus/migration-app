import{a$ as r,lV as j,lW as E,lX as H,gj as Q,cx as V,cv as D,km as Z,ca as J,kn as tt,ko as et,kp as st,kq as ot,cz as it,kr as rt,ks as at,cB as nt,lY as pt,lZ as q}from"./index-Cv1x7wWx.js";import{r as dt}from"./vec3f32-nZdmKIgz.js";import{n as lt}from"./WGLContainer-Up7GOusB.js";import{o as ht}from"./FeatureCommandQueue-sVhd395J.js";import{t as B}from"./utils-ehcGqGxa.js";import{j as ct,_ as P,p as ut,X as ft,C as g,Y as vt,a as mt,w as yt,h as G,g as n,r as xt,U as gt,m as L,b as wt,P as W,v as _t,t as Mt}from"./GraphShaderModule-CuLIQIMK.js";import{e as St}from"./TechniqueType-uMFRS8dR.js";import{t as U}from"./VertexElementDescriptor-BLyltQyJ.js";class k extends wt{}r([G(0,g)],k.prototype,"pos",void 0),r([G(1,g)],k.prototype,"uv",void 0);class $t extends _t{}class N extends W{}r([n(xt)],N.prototype,"dvs",void 0);class m extends W{}r([n(g)],m.prototype,"perspective",void 0),r([n(g)],m.prototype,"texSize",void 0),r([n(P)],m.prototype,"wrapAroundShift",void 0),r([n(P)],m.prototype,"opacity",void 0),r([n(gt)],m.prototype,"texture",void 0);class x extends ct{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ut(t,this.config.perspective)),o=new ft(e.pos.add(new g(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(i.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}r([n(N)],x.prototype,"transform",void 0),r([n(m)],x.prototype,"config",void 0),r([j(0,L(k))],x.prototype,"vertex",null),r([j(0,L($t))],x.prototype,"fragment",null);class bt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new x}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(B);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...B,stencil:{write:!1,test:{compare:H.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){Q(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new ht(s,{vertex:{positions:{data:t.position,attributes:[new U("pos",2,D.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new U("uv",2,D.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:V.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class It extends lt{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=Z(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==J.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const w=q(c),d=i*o[0],v=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=p*d,b=p*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(d/2,v/2)),rt(a,a,dt(d/$,-v/b,1)),at(a,a,-w),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=s,f=this._localOrigin;let w,d=0;const v=nt(i);if(v&&i.isWrappable){const y=c[0],S=c[1],_=q(o),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[z,C]=v.valid,l=pt(i),{x:I,y:F}=u.targetGeometry,K=[I,F],O=[0,0];s.toScreen(O,K);const M=[0,0];let R;R=a>p?.5*p:.5*a;const T=Math.floor((I+.5*l)/l),X=z+T*l,Y=C+T*l,A=[O[0]+R,0];s.toMap(M,A),M[0]>Y&&(d=l),A[0]=O[0]-R,s.toMap(M,A),M[0]<X&&(d=-l),w={worldWidth:l,xBounds:[z,C]}}for(const y of t)y.updateDrawCoords(f,d,i,w)}}export{It as u};
