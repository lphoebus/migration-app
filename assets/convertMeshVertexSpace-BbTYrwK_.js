import{aL as p,ax as m,aS as s}from"./index-Byn_dG8u.js";import{p as a}from"./MeshVertexAttributes-CTHwm5UC.js";import{B as n}from"./vertexSpaceConversion-DTeRC6Qs.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-DwF0BO9r.js";import"./computeTranslationToOriginAndRotation-ZdkZ_m3r.js";import"./projectPointToVector-IVJ1Pj0s.js";import"./meshVertexSpaceUtils-CxeDJeiT.js";import"./MeshLocalVertexSpace-Dt0obgaQ.js";import"./vec3-f5qeNS3o.js";import"./BufferView-BK1AClzv.js";import"./vec4-CL1D21EQ.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
