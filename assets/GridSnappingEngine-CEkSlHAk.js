import{dh as V,bC as U,hx as E,dF as F,hy as X,ba as Y,cl as D,hz as W,hA as z,a$ as o,b0 as p,b1 as A}from"./index-Byn_dG8u.js";import{l as H,u as I,t as T}from"./gridUtils-Ba3PDkDm.js";import{f as g,d as _,c as k}from"./SketchOptions-B6B0a5FC.js";import{r as G,a as q}from"./RouteLayerInteraction-Dqdo6igP.js";import"./geodesicUtils-B2LBSqWn.js";import"./plane-CSTuvQSI.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-Cr73JZjN.js";import"./projectVectorToVector-CoPeLRNW.js";import"./projectPointToVector-IVJ1Pj0s.js";import"./elevationInfoUtils--3LZxwHG.js";import"./Stop-3viRz41U.js";import"./networkEnums-BSEftqwN.js";let s=class extends V{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var e;return(e=this.grid)!=null&&e.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var e;return U(((e=this.grid)==null?void 0:e.rotation)??0)}get gridCenter(){var t;const{spatialReference:e,grid:i}=this;if(!i||!e||!E(i.center.spatialReference,e))return null;try{const r=F(i.center,e),n=e.isWrappable&&((t=this.view)==null?void 0:t.center)!=null?X(r.x,this.view.center.x,e):r.x;return g(n,r.y,r.z)}catch(r){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:i}=this;if(!i||!e)return 1;const{majorLineInterval:t,dynamicScaling:r}=i;return t<1?null:H(t,e,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?D(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:i}=this;return i&&e?e/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,i,t){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=t.feature)!=null&&u.attributes&&_ in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=r.distance*(t.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,i){const t=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:u,viewMetersPerSRUnit:h,offsetScaleFactor:v,spatialReference:f,gridMetersPerStride:b,pixelsPerStride:C}=this;if(!(r&&u&&h&&l&&f&&v&&b&&C)||!r.dynamicScaling&&C<T||!E(e.spatialReference,f))return t;const P=F(e,f),L=g(P.x,P.y,P.z),c=S(L,-a,l,-n),m=b/h*v,d=B(c,m,l),{shouldSnapX:w,shouldSnapY:y}=J(d,c,i,u,h);if(!w&&!y)return[];const O=g((w?d:c)[0],(y?d:c)[1]),M=S(O,a,l,n),$=S(d,a,l,n);if(y){const R=j(d,c,m,"y"),x=S(R,a,l,n);t.push(new G({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=j(d,c,m,"x"),x=S(R,a,l,n);t.push(new G({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&y&&t.push(new q(M,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([A("esri.views.interactive.snapping.GridSnappingEngine")],s);const S=(e,i,t,r)=>{const n=k(e[0],e[1],e[2]);return z(n,z(n,n,t,i),t,r)},B=(e,i,t)=>{const r=(e[0]-t[0])/i,n=(e[1]-t[1])/i,a=Math.trunc(r),l=Math.trunc(n),u=Math.round(r%1),h=Math.round(n%1),v=t[0]+(a+u)*i,f=t[1]+(l+h)*i;return g(v,f)},J=(e,i,t,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-i[0])/r,l=(e[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},j=(e,i,t,r)=>{if(r==="y"){const a=i[0]>e[0]?1:-1;return g(e[0]+t*a,e[1])}const n=i[1]>e[1]?1:-1;return g(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
