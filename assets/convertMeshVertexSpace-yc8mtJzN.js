import{bl as p,aw as m,bw as s}from"./index-ChIkxCSH.js";import{p as n}from"./MeshVertexAttributes-D8Lzy9pR.js";import{B as a}from"./vertexSpaceConversion-BdRGvH2i.js";import"./meshProperties-B4vupnXI.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-34r1Gjox.js";import"./computeTranslationToOriginAndRotation-CQEwZf4t.js";import"./projectPointToVector-hNUS0kFz.js";import"./meshVertexSpaceUtils-SlFJxzWw.js";import"./MeshLocalVertexSpace-CxVNDNSM.js";import"./vec3-BRvAg5ns.js";import"./BufferView-DthWqQwj.js";import"./vec4-BEzU3s7I.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
