import{c2 as c,b6 as f,g_ as y,aK as S,dd as g,eO as m,gV as R,bg as p,k0 as d,fI as O}from"./index-Byn_dG8u.js";import{c as x}from"./AttributeBinsFeatureSet-Bq3vRy_9.js";function J(i){const e=i.geometry,n=i.toJSON(),t=n;let s,a,u;if(e!=null&&(a=e.spatialReference,u=m(a),t.geometryType=R(e),t.geometry=JSON.stringify(e),t.inSR=u),n.outSR?(t.outSR=m(n.outSR),s=i.outSpatialReference):e&&(t.outSR=t.inSR,s=a),t.bin&&(t.bin=JSON.stringify(t.bin)),t.quantizationParameters&&(t.quantizationParameters=JSON.stringify(t.quantizationParameters)),t.outStatistics&&(t.outStatistics=JSON.stringify(t.outStatistics)),t.outTimeReference&&(t.outTimeReference=JSON.stringify(t.outTimeReference)),n.timeExtent){const o=n.timeExtent,{start:r,end:l}=o;r==null&&l==null||(t.time=r===l?r:`${r??"null"},${l??"null"}`),delete n.timeExtent}return i.defaultSpatialReference&&p(a,s)&&(t.defaultSR=t.inSR,delete t.inSR,delete t.outSR),t}async function N(i,e,n){return e.timeExtent!=null&&e.timeExtent.isEmpty?{data:{features:[]}}:await q(i,e,n)}async function q(i,e,n={}){const t=typeof i=="string"?c(i):i,s=e.geometry?[e.geometry]:[],a=await f(s,null,{signal:n.signal}),u=a==null?void 0:a[0];u!=null&&((e=e.clone()).geometry=u);const o=y({...t.query,f:"json",...J(e)});return S(g(t.path,"queryBins"),{...n,query:{...o,...n.query}})}async function b(i,e,n){const{data:t}=await N(O(i),d.from(e),n);return x.fromJSON(t)}export{b as executeAttributeBinsQuery};
