import{eA as V,cb as U,hQ as E,g5 as F,hR as X,ba as Y,cR as D,hS as T,hT as j,bg as o,bh as p,bi as W}from"./index-BEoKfti0.js";import{l as A,u as H,t as I}from"./gridUtils-ic9BphA.js";import{f as g,d as Q,c as _}from"./hitTestSelectUtils-DIC5iTIR.js";import{r as G,a as k}from"./RouteLayerInteraction-C35SYb9G.js";import"./geodesicUtils-Bnb3Wt7.js";import"./projectVectorToVector-CHmMlLSD.js";import"./projectPointToVector-C5PdQ2Hi.js";import"./plane-51lu0TL7.js";import"./vectorStacks-BmSOBDbw.js";import"./mat3f64-B5olm6j.js";import"./mat4f64-qb6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-Cr8lWHJy.js";import"./elevationInfoUtils-CPpM2dLb.js";import"./spatialReferenceEllipsoidUtils-8QzmygbQ.js";import"./Stop-BJDl1dDL.js";import"./networkEnums-CPGrH5De.js";import"./geodeticLengthOperator-B80KNOlV.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-CsF-8C8g.js";import"./lineSegment-CQ-U-Zfb.js";let s=class extends V{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var e;return(e=this.grid)!=null&&e.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var e;return U(((e=this.grid)==null?void 0:e.rotation)??0)}get gridCenter(){var t;const{spatialReference:e,grid:i}=this;if(!i||!e||!E(i.center.spatialReference,e))return null;try{const r=F(i.center,e),n=e.isWrappable&&((t=this.view)==null?void 0:t.center)!=null?X(r.x,this.view.center.x,e):r.x;return g(n,r.y,r.z)}catch(r){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:i}=this;if(!i||!e)return 1;const{majorLineInterval:t,dynamicScaling:r}=i;return t<1?null:A(t,e,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?D(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*T(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?H(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:i}=this;return i&&e?e/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,i,t){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=t.feature)!=null&&u.attributes&&Q in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=r.distance*(t.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,i){const t=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:u,viewMetersPerSRUnit:h,offsetScaleFactor:m,spatialReference:f,gridMetersPerStride:b,pixelsPerStride:C}=this;if(!(r&&u&&h&&l&&f&&m&&b&&C)||!r.dynamicScaling&&C<I||!E(e.spatialReference,f))return t;const y=F(e,f),L=g(y.x,y.y,y.z),c=S(L,-a,l,-n),P=b/h*m,d=q(c,P,l),{shouldSnapX:v,shouldSnapY:w}=B(d,c,i,u,h);if(!v&&!w)return[];const O=g((v?d:c)[0],(w?d:c)[1]),R=S(O,a,l,n),$=S(d,a,l,n);if(w){const M=z(d,c,P,"y"),x=S(M,a,l,n);t.push(new G({lineStart:$,lineEnd:x,targetPoint:R,isDraped:!1}))}if(v){const M=z(d,c,P,"x"),x=S(M,a,l,n);t.push(new G({lineStart:$,lineEnd:x,targetPoint:R,isDraped:!1}))}return v&&w&&t.push(new k(R,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([W("esri.views.interactive.snapping.GridSnappingEngine")],s);const S=(e,i,t,r)=>{const n=_(e[0],e[1],e[2]);return j(n,j(n,n,t,i),t,r)},q=(e,i,t)=>{const r=(e[0]-t[0])/i,n=(e[1]-t[1])/i,a=Math.trunc(r),l=Math.trunc(n),u=Math.round(r%1),h=Math.round(n%1),m=t[0]+(a+u)*i,f=t[1]+(l+h)*i;return g(m,f)},B=(e,i,t,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-i[0])/r,l=(e[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},z=(e,i,t,r)=>{if(r==="y"){const a=i[0]>e[0]?1:-1;return g(e[0]+t*a,e[1])}const n=i[1]>e[1]?1:-1;return g(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
