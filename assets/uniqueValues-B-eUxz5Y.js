import{ax as r,fM as v,fN as m,fO as w,fP as c,fQ as q,fR as x,fS as y,fT as E}from"./index-Cv1x7wWx.js";async function h(e){if(!(e!=null&&e.layer)||!e.field&&!e.valueExpression)throw new r("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const s=e.valueExpression||e.sqlExpression,n=s&&!e.sqlExpression;if(s){if(n){if(!e.view)throw new r("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!e.valueExpression)throw new r("unique-values:missing-parameters","'valueExpression' parameters are required")}e.forBinning&&v(e,"unique-values");const{layer:o,...p}=e,l=e.forBinning?m:w,a=c(o,l,e.forBinning);if(!a)throw new r("unique-values:invalid-parameters","'layer' must be one of these types: "+q(l).join(", "));const i={layerAdapter:a,...p},u=i.signal!=null?{signal:i.signal}:null;await a.load(u);const d=await x({field:i.field,field2:i.field2,field3:i.field3,valueExpression:i.valueExpression}),t=y(a,d,"unique-values:invalid-parameters");if(t)throw t;i.filter&&!i.filter.spatialRelationship&&(i.filter.spatialRelationship="intersects");const f=E(i.filter,"summary-statistics:invalid-parameters");if(f)throw f;return i}async function B(e){const{layerAdapter:s,...n}=await h(e);return s.uniqueValues(n)}export{B as default};
