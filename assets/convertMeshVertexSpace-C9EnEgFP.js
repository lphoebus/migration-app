import{bl as p,aw as m,bw as s}from"./index-BEoKfti0.js";import{p as n}from"./MeshVertexAttributes-C359ehxs.js";import{B as a}from"./vertexSpaceConversion-CYA2X2Ul.js";import"./meshProperties-B4vupnXI.js";import"./mat3f64-B5olm6j.js";import"./mat4f64-qb6UJoq.js";import"./spatialReferenceEllipsoidUtils-8QzmygbQ.js";import"./computeTranslationToOriginAndRotation-B8qrMJAT.js";import"./projectPointToVector-C5PdQ2Hi.js";import"./meshVertexSpaceUtils-Bt3PTfWv.js";import"./MeshLocalVertexSpace-CnQlpA9V.js";import"./vec3-D3Z8GnhR.js";import"./BufferView-BFYsiLb.js";import"./vec4-CUosJdzD.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
