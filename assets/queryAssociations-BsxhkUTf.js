import{bA as y,bg as a,bh as d,bi as m,dv as g,dx as f,dw as b,aF as w,ic as v,ba as S,dq as $}from"./index-Ua1bMCr9.js";import{d as j}from"./Association-Csufs44h.js";let o=class extends y{constructor(e){super(e),this.associations=[]}};a([d({type:[j],json:{write:!0}})],o.prototype,"associations",void 0),o=a([m("esri.rest.networks.support.QueryAssociationsResult")],o);function I(s){const{returnDeletes:e,elements:r,gdbVersion:n,moment:i}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(r.map(t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId}))),types:JSON.stringify(s.types.map(t=>$.toJSON(t))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:n,moment:i??Date.now()}}async function A(s,e,r){const n=g(s),i={...I(e),f:"json"},t=f({...n.query,...i}),c=b(t,{...r,method:"post"}),u=`${n.path}/associations/query`,{data:p}=await w(u,c),l=o.fromJSON(p);return e.types.includes("connectivity")&&v(S.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),l}export{A as queryAssociations};
